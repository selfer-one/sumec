# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: ECS Infrastructure

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]
env:
  IMAGE_NAME: sumec
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 824308980797
  TF_VERSION: 1.5.0
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init && cat .terraform/terraform.tfstate | grep '"type"'
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
    

      - name: Terraform create ecr repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}

          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_IN_AUTOMATION: true
          TF_INPUT: false

          TF_WORKSPACE: dev
        run: |
          terraform plan -no-color -target=aws_ecr_repository.sumec -out=tfplan
          terraform apply -auto-approve -no-color tfplan 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/sumec:latest

      - name: Terraform deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}      
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_IN_AUTOMATION: true
          TF_INPUT: false
          TF_WORKSPACE: dev
        run: |
          terraform plan -no-color -out=tfplan
          terraform apply -auto-approve -no-color tfplan

      - name: Get Load Balancer URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: lb_url
        run: |
          LB_URL=$(terraform output -raw load_balancer_url)
          echo "url=$LB_URL" >> $GITHUB_OUTPUT
          echo "Load Balancer URL: $LB_URL"
      
      - name: Test Application
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Waiting for ECS service to be stable..."
          sleep 60
          
          echo "Testing application availability..."
          for i in {1..10}; do
            if curl -f "${{ steps.lb_url.outputs.url }}"; then
              echo "Application is responding!"
              break
            else
              echo "Attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done
 
      - name: Terraform destroy
        run: terraform destroy -auto-approve
